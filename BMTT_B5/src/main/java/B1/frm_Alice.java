package B1;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author roxph
 */
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.nio.file.Paths;
import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.PublicKey;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import javax.crypto.Cipher;
import javax.crypto.KeyAgreement;
import javax.crypto.SecretKey;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.SecretKeySpec;
public class frm_Alice extends javax.swing.JFrame {

    /**
     * Creates new form frm_Alice
     */
    public frm_Alice() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        txt_alice_key = new javax.swing.JTextField();
        txt_bob_key = new javax.swing.JTextField();
        txt_encrypt_shared_secret = new javax.swing.JTextField();
        txt_shared_secret = new javax.swing.JTextField();
        btn_alice_key_generate = new javax.swing.JButton();
        btn_bob_key_display = new javax.swing.JButton();
        btn_enrcypt_secret_key = new javax.swing.JButton();
        btn_encrypt_decrypt = new javax.swing.JButton();
        btn_make_secret_key = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        jButton5.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_alice_key_generate.setText("ALICE GENER");
        btn_alice_key_generate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_alice_key_generateActionPerformed(evt);
            }
        });

        btn_bob_key_display.setText("BOB DISPLAY");
        btn_bob_key_display.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_bob_key_displayActionPerformed(evt);
            }
        });

        btn_enrcypt_secret_key.setText("ENCRYPT SECRET");
        btn_enrcypt_secret_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_enrcypt_secret_keyActionPerformed(evt);
            }
        });

        btn_encrypt_decrypt.setText("RUN ENCRYPT/DECRYPT FORM");
        btn_encrypt_decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_encrypt_decryptActionPerformed(evt);
            }
        });

        btn_make_secret_key.setText("MAKE SECRET");
        btn_make_secret_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_make_secret_keyActionPerformed(evt);
            }
        });

        jLabel1.setText("ALICE FORM");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_alice_key, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_bob_key, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_shared_secret, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_encrypt_shared_secret, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_enrcypt_secret_key, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_make_secret_key, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_bob_key_display, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_alice_key_generate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(btn_encrypt_decrypt)))
                .addContainerGap(35, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(287, 287, 287))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_alice_key, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_alice_key_generate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_bob_key, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_bob_key_display, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_shared_secret, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_make_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_encrypt_shared_secret, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_enrcypt_secret_key, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btn_encrypt_decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_alice_key_generateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_alice_key_generateActionPerformed
        // TODO add your handling code here:
        try {
            // Generate DH parameters
            AlgorithmParameterGenerator paramGen = AlgorithmParameterGenerator.getInstance("DH");
            paramGen.init(512);
            AlgorithmParameters params = paramGen.generateParameters();
            DHParameterSpec dhSkipParamSpec = params.getParameterSpec(DHParameterSpec.class);

            System.out.println("Generating a DH KeyPair...");
            KeyPairGenerator aliceKpairGen = KeyPairGenerator.getInstance("DH");
            aliceKpairGen.initialize(dhSkipParamSpec);
            KeyPair aliceKpair = aliceKpairGen.generateKeyPair();

            System.out.println("Initializing the KeyAgreement Engine with DH private key");
            aliceKeyAgree = KeyAgreement.getInstance("DH");
            aliceKeyAgree.init(aliceKpair.getPrivate());

            // Encode and save the public key
            byte[] alicePubKeyEnc = aliceKpair.getPublic().getEncoded();
            java.nio.file.Path dirPath = Paths.get("src/week_04");

            // Create directory if it doesn't exist
            if (!java.nio.file.Files.exists(dirPath)) {
                java.nio.file.Files.createDirectories(dirPath);
            }

            // Write the public key to a file
            try (FileOutputStream fos = new FileOutputStream(dirPath.resolve("A.pub").toFile())) {
                fos.write(alicePubKeyEnc);
            }

            // Display the encoded public key in the text field
            txt_alice_key.setText(java.util.Base64.getEncoder().encodeToString(alicePubKeyEnc));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_alice_key_generateActionPerformed

    private void btn_bob_key_displayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_bob_key_displayActionPerformed
        // TODO add your handling code here:
         try {
            byte[] bkeyp;
            // Read the public key from the file
            try (FileInputStream fis = new FileInputStream(Paths.get("src/week_04/B.pub").toFile())) {
                bkeyp = new byte[fis.available()];
                fis.read(bkeyp);
            }

            // Display the public key in the text field
            txt_bob_key.setText(java.util.Base64.getEncoder().encodeToString(bkeyp));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_bob_key_displayActionPerformed

    private void btn_make_secret_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_make_secret_keyActionPerformed
        // TODO add your handling code here:
        try {
            byte[] bobPubKeyEnc;
            // Read Bob's public key from the file
            try (FileInputStream fis = new FileInputStream(Paths.get("src/week_04/B.pub").toFile())) {
                bobPubKeyEnc = new byte[fis.available()];
                fis.read(bobPubKeyEnc);
            }

            // Generate Bob's public key from the encoded bytes
            KeyFactory aliceKeyFac = KeyFactory.getInstance("DH");
            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(bobPubKeyEnc);
            bobPubKey = aliceKeyFac.generatePublic(x509KeySpec);

            System.out.println("Executing PHASE1 of key agreement...");
            aliceKeyAgree.doPhase(bobPubKey, true);

            // Generate the shared secret
            byte[] aliceSharedSecret = aliceKeyAgree.generateSecret();
            System.out.println("Khoa chung: secret (DEBUG ONLY): " + CryptoUtil.toHexString(aliceSharedSecret));

            // Display the shared secret in the text field
            txt_shared_secret.setText(CryptoUtil.toHexString(aliceSharedSecret));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_btn_make_secret_keyActionPerformed

    private void btn_enrcypt_secret_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_enrcypt_secret_keyActionPerformed
        // TODO add your handling code here:
        try {
            // Complete the key agreement phase and generate the shared secret
            aliceKeyAgree.doPhase(bobPubKey, true);
            byte[] sharedSecret = aliceKeyAgree.generateSecret();

            // Display the shared secret in hexadecimal format
            txt_encrypt_shared_secret.setText(CryptoUtil.toHexString(sharedSecret));

            // Generate a DES key from the shared secret using SHA-256
            MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
            byte[] desKeyBytes = Arrays.copyOf(sha256.digest(sharedSecret), 8);
            SecretKeySpec desKeySpec = new SecretKeySpec(desKeyBytes, "DES");

            // Display the DES key in Base64 format
            txt_encrypt_shared_secret.setText(Base64.getEncoder().encodeToString(desKeySpec.getEncoded()));

            // Save the DES key to a file
            String fileName = "src/week_04/A.txt";
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(fileName))) {
                bw.write(Base64.getEncoder().encodeToString(desKeySpec.getEncoded()));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btn_enrcypt_secret_keyActionPerformed

    private void btn_encrypt_decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_encrypt_decryptActionPerformed
        // TODO add your handling code here:
        frm_DESCS des = new frm_DESCS();
        des.setVisible(true);
    }//GEN-LAST:event_btn_encrypt_decryptActionPerformed
    
    // Generated Code
    private KeyAgreement aliceKeyAgree;
    private PublicKey bobPubKey;
    private SecretKey aliceDesKey;
    private Cipher aliceCipher;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_Alice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_Alice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_Alice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_Alice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_Alice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_alice_key_generate;
    private javax.swing.JButton btn_bob_key_display;
    private javax.swing.JButton btn_encrypt_decrypt;
    private javax.swing.JButton btn_enrcypt_secret_key;
    private javax.swing.JButton btn_make_secret_key;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField txt_alice_key;
    private javax.swing.JTextField txt_bob_key;
    private javax.swing.JTextField txt_encrypt_shared_secret;
    private javax.swing.JTextField txt_shared_secret;
    // End of variables declaration//GEN-END:variables
}
