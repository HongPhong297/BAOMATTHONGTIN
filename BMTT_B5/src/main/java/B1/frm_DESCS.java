/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package B1;

/**
 *
 * @author roxph
 */
import javax.swing.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
public class frm_DESCS extends javax.swing.JFrame {

    /**
     * Creates new form frm_DESCS
     */
    public frm_DESCS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txt_ciphertext = new javax.swing.JTextArea();
        txt_key = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_plaintext = new javax.swing.JTextArea();
        btn_open_alice_key = new javax.swing.JButton();
        btn_open_bob_key = new javax.swing.JButton();
        btn_encrypt = new javax.swing.JButton();
        btn_decrypt = new javax.swing.JButton();
        btn_save_to_file = new javax.swing.JButton();
        btn_open_file = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_ciphertext.setColumns(20);
        txt_ciphertext.setRows(5);
        jScrollPane1.setViewportView(txt_ciphertext);

        txt_plaintext.setColumns(20);
        txt_plaintext.setRows(5);
        jScrollPane2.setViewportView(txt_plaintext);

        btn_open_alice_key.setText("open alice key");
        btn_open_alice_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open_alice_keyActionPerformed(evt);
            }
        });

        btn_open_bob_key.setText("o bob key");
        btn_open_bob_key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open_bob_keyActionPerformed(evt);
            }
        });

        btn_encrypt.setText("encrypt");
        btn_encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_encryptActionPerformed(evt);
            }
        });

        btn_decrypt.setText("decrypt");
        btn_decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_decryptActionPerformed(evt);
            }
        });

        btn_save_to_file.setText("save");
        btn_save_to_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_save_to_fileActionPerformed(evt);
            }
        });

        btn_open_file.setText("open file");
        btn_open_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_open_fileActionPerformed(evt);
            }
        });

        jLabel1.setText("DESCIPHER DEMO");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(152, 152, 152)
                .addComponent(btn_open_alice_key)
                .addGap(132, 132, 132)
                .addComponent(btn_open_bob_key, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(114, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn_encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(btn_decrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)
                                .addComponent(btn_save_to_file, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(btn_open_file, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(111, 111, 111))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(288, 288, 288))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(112, 112, 112)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                    .addGap(113, 113, 113)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113)
                .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_open_alice_key)
                    .addComponent(btn_open_bob_key))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_encrypt)
                    .addComponent(btn_decrypt)
                    .addComponent(btn_save_to_file)
                    .addComponent(btn_open_file))
                .addContainerGap(7, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(41, 41, 41)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(236, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_open_alice_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open_alice_keyActionPerformed
        // TODO add your handling code here:
        try {
            BufferedReader br = null;
            String fileName = "src/week_04/A.txt"; // Corrected the file path (replaced space with underscore)

            // Open the file for reading
            br = new BufferedReader(new FileReader(fileName));
            StringBuffer sb = new StringBuffer();

            // Notify the user that the file was opened successfully
            JOptionPane.showMessageDialog(null, "File Opened Successfully.");

            // Read the file content in chunks
            char[] ca = new char[5];
            while (br.ready()) {
                int len = br.read(ca); // Fixed the assignment by adding `=`
                sb.append(ca, 0, len);
            }

            // Close the BufferedReader
            br.close();

            // Convert the file content to a string and display it in the text field
            String chuoi = sb.toString();
            txt_key.setText(chuoi);
        } catch (IOException ex) {
            // Log the exception
            Logger.getLogger(frm_DESCS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_open_alice_keyActionPerformed

    private void btn_open_bob_keyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open_bob_keyActionPerformed
        // TODO add your handling code here:
         try {
            BufferedReader br = null;
            String fileName = "src/week_04/B.txt";

            // Open the file for reading
            br = new BufferedReader(new FileReader(fileName));
            StringBuffer sb = new StringBuffer();

            // Notify the user that the file was opened successfully
            JOptionPane.showMessageDialog(null, "File Opened Successfully.");

            // Read the file content in chunks
            char[] ca = new char[5];
            while (br.ready()) {
                int len = br.read(ca); // Fixed the assignment by adding `=`
                sb.append(ca, 0, len);
            }

            // Close the BufferedReader
            br.close();

            // Convert the file content to a string and display it in the text field
            String chuoi = sb.toString();
            txt_key.setText(chuoi);
        } catch (IOException ex) {
            // Log the exception
            Logger.getLogger(frm_DESCS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_open_bob_keyActionPerformed

    private void btn_encryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_encryptActionPerformed
        // TODO add your handling code here:
        try {
            // Get the plaintext and secret key from the text fields
            String plaintext = txt_plaintext.getText();
            String secretKey = txt_key.getText();

            // Encrypt the plaintext using the DESCipher class
            String encryptedText = DESCipher.encrypt(plaintext, secretKey);

            // Display the encrypted text in the ciphertext text field
            txt_ciphertext.setText(encryptedText);
        } catch (Exception e) {
            // Show an error message if encryption fails
            JOptionPane.showMessageDialog(this,
                    "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_encryptActionPerformed

    private void btn_decryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_decryptActionPerformed
        // TODO add your handling code here:
        try {
            // Get the ciphertext and secret key from the text fields
            String ciphertext = txt_ciphertext.getText();
            String secretKey = txt_key.getText();

            // Decrypt the ciphertext using the DESCipher class
            String decryptedText = DESCipher.decrypt(ciphertext, secretKey);

            // Display the decrypted text in the plaintext text field
            txt_plaintext.setText(decryptedText);
        } catch (Exception e) {
            // Show an error message if decryption fails
            JOptionPane.showMessageDialog(this,
                    "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_decryptActionPerformed

    private void btn_save_to_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_save_to_fileActionPerformed
        // TODO add your handling code here:
        // Get the ciphertext from the text field
        String ciphertext = txt_ciphertext.getText();

        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Ciphertext to File");

        // Show the save dialog
        int userSelection = fileChooser.showSaveDialog(this);

        // If the user approves, save the ciphertext to the selected file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            try (FileWriter writer = new FileWriter(fileToSave.getAbsolutePath() + ".txt")) {
                writer.write(ciphertext);

                // Notify the user that the file was saved successfully
                JOptionPane.showMessageDialog(this,
                        "Ciphertext saved to file successfully.", "Success",
                        JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                // Show an error message if saving fails
                JOptionPane.showMessageDialog(this,
                        "Error saving file: " + e.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_save_to_fileActionPerformed

    private void btn_open_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_open_fileActionPerformed
        // TODO add your handling code here:
        // Create a file chooser dialog
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open File containing Ciphertext");

        // Show the open dialog
        int userSelection = fileChooser.showOpenDialog(this);

        // If the user approves, open the selected file
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(fileToOpen))) {
                // Read the file content
                StringBuilder ciphertextBuilder = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    ciphertextBuilder.append(line);
                }

                // Display the ciphertext in the text field
                String ciphertext = ciphertextBuilder.toString().trim();
                txt_ciphertext.setText(ciphertext);
            } catch (IOException e) {
                // Show an error message if opening the file fails
                JOptionPane.showMessageDialog(this,
                        "Error opening file: " + e.getMessage(), "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btn_open_fileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_DESCS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_DESCS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_decrypt;
    private javax.swing.JButton btn_encrypt;
    private javax.swing.JButton btn_open_alice_key;
    private javax.swing.JButton btn_open_bob_key;
    private javax.swing.JButton btn_open_file;
    private javax.swing.JButton btn_save_to_file;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txt_ciphertext;
    private javax.swing.JTextField txt_key;
    private javax.swing.JTextArea txt_plaintext;
    // End of variables declaration//GEN-END:variables
}
