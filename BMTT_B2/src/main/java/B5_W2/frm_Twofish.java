/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package B5_W2;

/**
 *
 * @author roxph
 */

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io. UnsupportedEncodingException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;
import java.util.logging. Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
public class frm_Twofish extends javax.swing.JFrame {

    /**
     * Creates new form frm_Twofish
     */
    TwofishCipher twofish = new TwofishCipher();   
    public frm_Twofish() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txt_plaintext = new javax.swing.JTextArea();
        txt_key = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_ciphertext = new javax.swing.JTextArea();
        txt_iv = new javax.swing.JTextField();
        btn_Decrypt = new javax.swing.JButton();
        btn_Openfile = new javax.swing.JButton();
        btn_Savefile = new javax.swing.JButton();
        btn_Encrypt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txt_plaintext.setColumns(20);
        txt_plaintext.setRows(5);
        jScrollPane1.setViewportView(txt_plaintext);

        txt_ciphertext.setColumns(20);
        txt_ciphertext.setRows(5);
        jScrollPane2.setViewportView(txt_ciphertext);

        btn_Decrypt.setText("Decrypt");
        btn_Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_DecryptActionPerformed(evt);
            }
        });

        btn_Openfile.setText("Open Cipher Text");
        btn_Openfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_OpenfileActionPerformed(evt);
            }
        });

        btn_Savefile.setText("Save File");
        btn_Savefile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_SavefileActionPerformed(evt);
            }
        });

        btn_Encrypt.setText("Encrypt");
        btn_Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_EncryptActionPerformed(evt);
            }
        });

        jLabel1.setText("PlainText");

        jLabel2.setText("Key");

        jLabel3.setText("IV");

        jLabel4.setText("CipherText");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                            .addComponent(txt_key)
                            .addComponent(jScrollPane2)
                            .addComponent(txt_iv)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_Encrypt)
                        .addGap(28, 28, 28)
                        .addComponent(btn_Decrypt)
                        .addGap(41, 41, 41)
                        .addComponent(btn_Savefile)
                        .addGap(52, 52, 52)
                        .addComponent(btn_Openfile)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_key, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_iv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Encrypt)
                    .addComponent(btn_Decrypt)
                    .addComponent(btn_Savefile)
                    .addComponent(btn_Openfile))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_DecryptActionPerformed
        // TODO add your handling code here:
        try {
            // Get ciphertext, key, and IV from text fields
            String ciphertext = txt_ciphertext.getText();
            byte[] key = txt_key.getText().getBytes(StandardCharsets.UTF_8);
            byte[] iv = txt_iv.getText().getBytes(StandardCharsets.UTF_8);

            // Base64 decode ciphertext
            byte[] decodedCiphertext = Base64.getDecoder().decode(ciphertext);

            // Decrypt ciphertext using Twofish
            String decryptedText = twofish.decrypt(decodedCiphertext, key, iv);

            // Display decrypted text
            txt_plaintext.setText(decryptedText);
        } catch (Exception ex) {
            // Log and display decryption error
            Logger.getLogger(frm_Twofish.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error decrypting: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_DecryptActionPerformed

    private void btn_OpenfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_OpenfileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open file containing ciphertext");
        int userSelection = fileChooser.showOpenDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION) {
            try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileChooser.getSelectedFile()))) {
                JOptionPane.showMessageDialog(this, "File opened successfully");
                txt_ciphertext.read(bufferedReader, null);
                txt_key.setText("");
                txt_plaintext.setText("");

            } catch(IOException e) {
                JOptionPane.showMessageDialog(this, "Error opening file" + e.getMessage());
            }
        }
    }//GEN-LAST:event_btn_OpenfileActionPerformed

    private void btn_SavefileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_SavefileActionPerformed

        // TODO add your handling code here:
        String ciphertext = txt_ciphertext.getText(); // Sửa lỗi cú pháp khai báo và gán giá trị
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save Ciphertext to File");
        int userSelection = fileChooser.showSaveDialog(this); // Sửa lỗi khai báo biến userSelection

        if (userSelection == JFileChooser.APPROVE_OPTION) { // Sửa cú pháp kiểm tra điều kiện
            File fileToSave = fileChooser.getSelectedFile(); // Sửa cú pháp khai báo biến fileToSave
            try (FileWriter writer = new FileWriter(fileToSave.getAbsolutePath() + ".txt")) {
                writer.write(ciphertext);
                JOptionPane.showMessageDialog(this, "Ciphertext saved to file successfully.",
                    "Success", JOptionPane.INFORMATION_MESSAGE); // Sửa lỗi thiếu dấu ngoặc và cách viết
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving file: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE); // Sửa lỗi thiếu dấu ngoặc
            }
        }
    }//GEN-LAST:event_btn_SavefileActionPerformed

    private void btn_EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_EncryptActionPerformed
        // TODO add your handling code here:
        try {
            // Get plaintext, key, and IV from text fields
            String plaintext = txt_plaintext.getText();
            byte[] key = txt_key.getText().getBytes(StandardCharsets.UTF_8);
            byte[] iv = txt_iv.getText().getBytes(StandardCharsets.UTF_8);

            // Encrypt plaintext using Twofish
            byte[] ciphertext = twofish.encrypt(plaintext, key, iv);

            // Base64 encode ciphertext
            String encryptedText = Base64.getEncoder().encodeToString(ciphertext);

            // Display encrypted text
            txt_ciphertext.setText(encryptedText);
        } catch (UnsupportedEncodingException e) {
            // Handle encoding error
            JOptionPane.showMessageDialog(this, "Unsupported encoding: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            // Log and display encryption error
            Logger.getLogger(frm_Twofish.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error encrypting: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_EncryptActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm_Twofish.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm_Twofish.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm_Twofish.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm_Twofish.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm_Twofish().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Decrypt;
    private javax.swing.JButton btn_Encrypt;
    private javax.swing.JButton btn_Openfile;
    private javax.swing.JButton btn_Savefile;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txt_ciphertext;
    private javax.swing.JTextField txt_iv;
    private javax.swing.JTextField txt_key;
    private javax.swing.JTextArea txt_plaintext;
    // End of variables declaration//GEN-END:variables
}
